p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
p1=ggplot(age_range,aes(x=age_range, fill=age_range))+geom_bar()
p2=ggplot(highest_education_level,aes(x=highest_education_level, fill=highest_education_level))+geom_bar()+  theme(axis.text.x = element_text(size = 4))
p3=ggplot(employment_status,aes(x=employment_status, fill=employment_status))+geom_bar()
p5=ggplot(country_1,aes(x=country_1[,1],y=country_1[,2],fill=country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
detected_country_1 = data.frame(detected_country_1)
p6=ggplot(detected_country_1,aes(x=detected_country_1[,1],y=detected_country_1[,2],fill=detected_country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
grid.arrange(p1, arrangeGrob(p2, ncol=1), heights=c(2/4, 2/4), ncol=1)
grid.arrange(p6, arrangeGrob(p5, ncol=1),ncol=2)
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
p1=ggplot(age_range,aes(x=age_range, fill=age_range))+geom_bar()
p2=ggplot(highest_education_level,aes(x=highest_education_level, fill=highest_education_level))+geom_bar()+  theme(axis.text.x = element_text(size = 4))
p3=ggplot(employment_status,aes(x=employment_status, fill=employment_status))+geom_bar()
p5=ggplot(country_1,aes(x=country_1[,1],y=country_1[,2],fill=country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
detected_country_1 = data.frame(detected_country_1)
p6=ggplot(detected_country_1,aes(x=detected_country_1[,1],y=detected_country_1[,2],fill=detected_country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
grid.arrange(p1, arrangeGrob(p2, ncol=1), heights=c(2/4, 2/4), ncol=1)
grid.arrange(p6, arrangeGrob(p5, ncol=1),ncol=2)
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p1=ggplot(age_range,aes(x=age_range, fill=age_range))+geom_bar()
p2=ggplot(highest_education_level,aes(x=highest_education_level, fill=highest_education_level))+geom_bar()+  theme(axis.text.x = element_text(size = 4))
p3=ggplot(employment_status,aes(x=employment_status, fill=employment_status))+geom_bar()
p5=ggplot(country_1,aes(x=country_1[,1],y=country_1[,2],fill=country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
detected_country_1 = data.frame(detected_country_1)
p6=ggplot(detected_country_1,aes(x=detected_country_1[,1],y=detected_country_1[,2],fill=detected_country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
grid.arrange(p1, arrangeGrob(p2, ncol=1), heights=c(2/4, 2/4), ncol=1)
grid.arrange(p6, arrangeGrob(p5, ncol=1),ncol=2)
fit.full=lm(Number_of_courses~gender+age_range+highest_education_level,data=data1)
summary(fit.full)
p16=plot(fit.full)
p17=plot(data1$Number_of_courses,predict(fit.full,data1))
grid.arrange(p17,ncol=2,nrow=2,heights=c(2/4, 2/4))
fit.full=lm(Number_of_courses~gender+age_range+highest_education_level,data=data1)
summary(fit.full)
p16=plot(fit.full)
p17=plot(data1$Number_of_courses,predict(fit.full,data1))
grid.arrange(p17)
fit.full=lm(Number_of_courses~gender+age_range+highest_education_level,data=data1)
summary(fit.full)
p16=plot(fit.full)
p17=plot(data1$Number_of_courses,predict(fit.full,data1))
grid.arrange(p17,p16)
fit.full=lm(Number_of_courses~gender+age_range+highest_education_level,data=data1)
summary(fit.full)
plot(fit.full)
plot(data1$Number_of_courses,predict(fit.full,data1))
fit.full=lm(Number_of_courses~gender+age_range+highest_education_level,data=data1)
summary(fit.full)
plot(fit.full)
plot(data1$Number_of_courses,predict(fit.full,data1))
p1=ggplot(age_range,aes(x=age_range, fill=age_range))+geom_bar()
p2=ggplot(highest_education_level,aes(x=highest_education_level, fill=highest_education_level))+geom_bar()+  theme(axis.text.x = element_text(size = 4))
p3=ggplot(employment_status,aes(x=employment_status, fill=employment_status))+geom_bar()
p5=ggplot(country_1,aes(x=country_1[,1],y=country_1[,2],fill=country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
detected_country_1 = data.frame(detected_country_1)
p6=ggplot(detected_country_1,aes(x=detected_country_1[,1],y=detected_country_1[,2],fill=detected_country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
grid.arrange(p1, arrangeGrob(p2, ncol=1), heights=c(2/4, 2/4), ncol=1)
grid.arrange(p6, arrangeGrob(p5, ncol=1),ncol=2)
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p1=ggplot(age_range,aes(x=age_range, fill=age_range))+geom_bar()
p2=ggplot(highest_education_level,aes(x=highest_education_level, fill=highest_education_level))+geom_bar()+  theme(axis.text.x = element_text(size = 4))
p3=ggplot(employment_status,aes(x=employment_status, fill=employment_status))+geom_bar()
p5=ggplot(country_1,aes(x=country_1[,1],y=country_1[,2],fill=country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
detected_country_1 = data.frame(detected_country_1)
p6=ggplot(detected_country_1,aes(x=detected_country_1[,1],y=detected_country_1[,2],fill=detected_country_1[,1])) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(size = 4))
grid.arrange(p1, arrangeGrob(p2, ncol=1), heights=c(2/4, 2/4), ncol=1)
grid.arrange(p6, arrangeGrob(p5, ncol=1),ncol=2)
#Drawings
ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
picture+scale_fill_gradient(low='white',high='red')+
theme_bw()
pictire_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
pictire_1 +scale_fill_gradient(low='pink',high='green')+
theme_bw()
library(dplyr)
library(ggplot2)
cyber.security.question.response_1=bind_rows(cyber.security.1_question.response,cyber.security.2_question.response,cyber.security.3_question.response,cyber.security.4_question.response ,cyber.security.5_question.response,cyber.security.6_question.response,cyber.security.7_question.response)
#Count the number of answers to each question
(t=table(cyber.security.question.response_1$quiz_question))
t=as.data.frame(t)
colnames(t) = c("quiz_question", "answers_numbers")
#Counting the number of people who answered the questions
quiz_question_1.7.1= cyber.security.question.response_1 %>% filter(quiz_question == "1.7.1")
quiz_question_1.7.2= cyber.security.question.response_1 %>% filter(quiz_question == "1.7.2")
quiz_question_1.7.3= cyber.security.question.response_1 %>% filter(quiz_question == "1.7.3")
quiz_question_1.7.4= cyber.security.question.response_1 %>% filter(quiz_question == "1.7.4")
quiz_question_1.7.5= cyber.security.question.response_1 %>% filter(quiz_question == "1.7.5")
quiz_question_1.7.6= cyber.security.question.response_1 %>% filter(quiz_question == "1.7.6")
quiz_question_1.8.1= cyber.security.question.response_1 %>% filter(quiz_question == "1.8.1")
quiz_question_1.8.2= cyber.security.question.response_1 %>% filter(quiz_question == "1.8.2")
quiz_question_1.8.3= cyber.security.question.response_1 %>% filter(quiz_question == "1.8.3")
quiz_question_1.8.4= cyber.security.question.response_1 %>% filter(quiz_question == "1.8.4")
quiz_question_1.8.5= cyber.security.question.response_1 %>% filter(quiz_question == "1.8.5")
quiz_question_1.8.6= cyber.security.question.response_1 %>% filter(quiz_question == "1.8.6")
quiz_question_2.19.1= cyber.security.question.response_1 %>% filter(quiz_question == "2.19.1")
quiz_question_2.20.1= cyber.security.question.response_1 %>% filter(quiz_question == "2.20.1")
quiz_question_2.8.1= cyber.security.question.response_1 %>% filter(quiz_question == "2.8.1")
quiz_question_2.8.2= cyber.security.question.response_1 %>% filter(quiz_question == "2.8.2")
quiz_question_2.8.3= cyber.security.question.response_1 %>% filter(quiz_question == "2.8.3")
quiz_question_3.11.1= cyber.security.question.response_1 %>% filter(quiz_question == "3.11.1")
quiz_question_3.11.2= cyber.security.question.response_1 %>% filter(quiz_question == "3.11.2")
quiz_question_3.11.3= cyber.security.question.response_1 %>% filter(quiz_question == "3.11.3")
quiz_question_3.18.1= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.1")
quiz_question_3.18.2= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.2")
quiz_question_3.18.3= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.3")
quiz_question_3.18.4= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.4")
quiz_question_3.18.5= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.5")
quiz_question_3.18.6= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.6")
quiz_question_3.18.7= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.7")
quiz_question_3.18.8= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.8")
quiz_question_3.18.9= cyber.security.question.response_1 %>% filter(quiz_question == "3.18.9")
No.people_1.7.1=length(unique(quiz_question_1.7.1$learner_id))
No.people_1.7.2=length(unique(quiz_question_1.7.2$learner_id))
No.people_1.7.3=length(unique(quiz_question_1.7.3$learner_id))
No.people_1.7.4=length(unique(quiz_question_1.7.4$learner_id))
No.people_1.7.5=length(unique(quiz_question_1.7.5$learner_id))
No.people_1.7.6=length(unique(quiz_question_1.7.6$learner_id))
No.people_1.8.1=length(unique(quiz_question_1.8.1$learner_id))
No.people_1.8.2=length(unique(quiz_question_1.8.2$learner_id))
No.people_1.8.3=length(unique(quiz_question_1.8.3$learner_id))
No.people_1.8.4=length(unique(quiz_question_1.8.4$learner_id))
No.people_1.8.5=length(unique(quiz_question_1.8.5$learner_id))
No.people_1.8.6=length(unique(quiz_question_1.8.6$learner_id))
No.people_2.19.1=length(unique(quiz_question_2.19.1$learner_id))
No.people_2.20.1=length(unique(quiz_question_2.20.1$learner_id))
No.people_2.8.1=length(unique(quiz_question_2.8.1$learner_id))
No.people_2.8.2=length(unique(quiz_question_2.8.2$learner_id))
No.people_2.8.3=length(unique(quiz_question_2.8.3$learner_id))
No.people_3.11.1=length(unique(quiz_question_3.11.1$learner_id))
No.people_3.11.2=length(unique(quiz_question_3.11.2$learner_id))
No.people_3.11.3=length(unique(quiz_question_3.11.3$learner_id))
No.people_3.18.1=length(unique(quiz_question_3.18.1$learner_id))
No.people_3.18.2=length(unique(quiz_question_3.18.2$learner_id))
No.people_3.18.3=length(unique(quiz_question_3.18.3$learner_id))
No.people_3.18.4=length(unique(quiz_question_3.18.4$learner_id))
No.people_3.18.5=length(unique(quiz_question_3.18.5$learner_id))
No.people_3.18.6=length(unique(quiz_question_3.18.6$learner_id))
No.people_3.18.7=length(unique(quiz_question_3.18.7$learner_id))
No.people_3.18.8=length(unique(quiz_question_3.18.8$learner_id))
No.people_3.18.9=length(unique(quiz_question_3.18.9$learner_id))
t_1=data.frame(question=c(t$quiz_question),No.people=c(No.people_1.7.1,No.people_1.7.2,No.people_1.7.3,No.people_1.7.4,No.people_1.7.5,No.people_1.7.6,No.people_1.8.1,No.people_1.8.2,No.people_1.8.3,No.people_1.8.4,No.people_1.8.5,No.people_1.8.6,No.people_2.19.1,No.people_2.20.1,No.people_2.8.1,No.people_2.8.2,No.people_2.8.3,No.people_3.11.1,No.people_3.11.2,No.people_3.11.3,No.people_3.18.1,No.people_3.18.2,No.people_3.18.3,No.people_3.18.4,No.people_3.18.5,No.people_3.18.6,No.people_3.18.7,No.people_3.18.8,No.people_3.18.9))
t_1
#Number of repeated answers
rep=data.frame(question_1=c(t$quiz_question), repeated_answers=c(t$answers_numbers-t_1$No.people))
rep
#Drawings
ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
picture+scale_fill_gradient(low='white',high='red')+
theme_bw()
pictire_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
pictire_1 +scale_fill_gradient(low='pink',high='green')+
theme_bw()
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 5))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
p7=ggplot(t, aes(x=quiz_question,y=answers_numbers,fill=answers_numbers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)+theme(axis.text.x = element_text(size = 3))
picture=ggplot(t_1, aes(x=question,y=No.people,fill=No.people))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p8=picture+scale_fill_gradient(low='white',high='red')+ #Gradient colour fill, from white to red
theme_bw()+theme(axis.text.x = element_text(size = 3))
picture_1=ggplot(rep, aes(x=question_1,y=repeated_answers,fill=repeated_answers))+geom_bar(stat="identity")+coord_polar(theta = "x", direction=1)
p9 =picture_1+scale_fill_gradient(low='pink',high='green')+
theme_bw()+theme(axis.text.x = element_text(size = 3))
grid.arrange(p7,p8,p9,ncol=2,nrow=2)
#drawings
ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot()
ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
#  Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")
ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()
#Count the number of answers to each step
(t_2=table(cyber.security.step.activity_1$step))
cyber.security.step.activity_1=bind_rows(cyber.security.1_step.activity,cyber.security.2_step.activity,cyber.security.3_step.activity,cyber.security.4_step.activity ,cyber.security.5_step.activity,cyber.security.6_step.activity,cyber.security.7_step.activity)
#Count the number of answers to each step
(t_2=table(cyber.security.step.activity_1$step))
t_2=sort(t_2)
step_null=cyber.security.step.activity_1 %>% filter(last_completed_at == "")
t_3=table(step_null$step)
t_3=sort(t_3)
t_2=as.data.frame(t_2)
t_3=as.data.frame(t_3)
t_4=data.frame(1:58,1:2)
colnames(t_2) = c("step", "numbers")
colnames(t_3) = c("step", "numbers_null")
colnames(t_4) = c("step","Percentage")
t_4$step=t_3$step
t_4['Percentage'] = t_3$numbers_null/t_2$numbers
t_4$number=t_3$number
t_4=sort(t_4)
t_2
t_3
t_4
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
install.packages("gridExtra")
library(gridExtra)
install.packages("gridExtra")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir=normalizePath('..'))
options(repos = list(CRAN="http://cran.rstudio.com/"))
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
library(dplyr)
library(ggplot2)
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
install.packages("gridExtra")
library(gridExtra)
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
grid.arrange(p14,p15,ncol=1,nrow=2,heights=c(1.5/4, 2.5/4))
#Count the number of answers to each step
(t_2=table(cyber.security.step.activity_1$step))
step_null=cyber.security.step.activity_1 %>% filter(last_completed_at == "")
t_3=table(step_null$step)
t_2=as.data.frame(t_2)
t_3=as.data.frame(t_3)
t_4=data.frame(1:58,1:2)
colnames(t_2) = c("step", "numbers")
colnames(t_3) = c("step", "numbers_null")
colnames(t_4) = c("step","Percentage")
t_4$step=t_3$step
t_4['Percentage'] = t_3$numbers_null/t_2$numbers
t_4$number=t_3$number
t_2
t_3
t_4
cyber.security.step.activity_1=bind_rows(cyber.security.1_step.activity,cyber.security.2_step.activity,cyber.security.3_step.activity,cyber.security.4_step.activity ,cyber.security.5_step.activity,cyber.security.6_step.activity,cyber.security.7_step.activity)
#Count the number of answers to each step
(t_2=table(cyber.security.step.activity_1$step))
step_null=cyber.security.step.activity_1 %>% filter(last_completed_at == "")
t_3=table(step_null$step)
t_2=as.data.frame(t_2)
t_3=as.data.frame(t_3)
t_4=data.frame(1:58,1:2)
colnames(t_2) = c("step", "numbers")
colnames(t_3) = c("step", "numbers_null")
colnames(t_4) = c("step","Percentage")
t_4$step=t_3$step
t_4['Percentage'] = t_3$numbers_null/t_2$numbers
t_4$number=t_3$number
t_2
t_3
t_4
#drawings
ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot()
ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
#  Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")
ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()
ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")
ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot()
ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
p11=ggplot (t_2, aes (x = step, y = numbers, size = numbers, colour =numbers)) +
# Scatter function: alpha sets the transparency of the scatter.
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable.
scale_size_area () +scale_color_gradient2(low = "yellow", mid = "green", high = "brown")+theme(axis.text.x = element_text(size = 1))
p12=ggplot(t_3, aes(x = step, y = numbers_null)) +  geom_boxplot()+theme(axis.text.x = element_text(size = 1))
p13=ggplot (t_3, aes (x = step, y = numbers_null, size = numbers_null, colour =numbers_null)) +
#  Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "pink", mid = "red", high = "blue")+theme(axis.text.x = element_text(size = 1))
p14=ggplot(t_4, aes(x = step, y = Percentage)) + geom_boxplot() +theme(axis.text.x = element_text(size = 3))
p15=ggplot (t_4, aes (x = step, y = Percentage, size = Percentage, colour =Percentage)) +
# Scatter plot function: alpha sets the scatter transparency
geom_point (position = "jitter") +
# Make the area of the scatter positively proportional to the value of the variable
scale_size_area () +scale_color_gradient2(low = "blue", mid = "orange", high = "purple")+theme(axis.text.x = element_text(size = 3))
grid.arrange(p10,p12,p11,p13,ncol=2,nrow=2,heights=c(1.5/4, 2.5/4))
cyber.security.step.activity_1=bind_rows(cyber.security.1_step.activity,cyber.security.2_step.activity,cyber.security.3_step.activity,cyber.security.4_step.activity ,cyber.security.5_step.activity,cyber.security.6_step.activity,cyber.security.7_step.activity)
#Count the number of answers to each step
(t_2=table(cyber.security.step.activity_1$step))
p10=ggplot(t_2, aes(x = step, y = numbers)) + geom_boxplot() +theme(axis.text.x = element_text(size = 1))
t_3
t_4$step=t_3$step
t_4['Percentage'] = t_3$numbers_null/t_2$numbers
t_4$number=t_3$number
t_2
t_3
t_4
