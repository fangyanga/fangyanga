# Load mlbench package
library(mlbench)
library(nclSLR)
library(MASS)
# Load the data
data(BreastCancer)
head(BreastCancer)
dim(BreastCancer)
# Remove NA
BreastCancer=na.omit(BreastCancer)
knitr::opts_chunk$set(echo = T, fig.align = 'center', out.width = '50%')
#1(a)
#Compute the inter-observation correlations:
r_obs = cor(t(gexpr_t))
setwd("/Users/wangyahan/Desktop/Statistical Learning for Data Science")
getwd
## Read in data
filename = "/Users/wangyahan/Statistical Learning for Data Science/Ch10Ex11.csv"
filename = "Ch10Ex11.csv"
gexpr = read.csv(filename, header=FALSE)
## Check size
dim(gexpr)
gexpr_t= t(gexpr)
gexpr_t=scale(gexpr_t)
setwd("/Users/wangyahan/Desktop/Statistical Learning for Data Science")
getwd
## Read in data
filename = "/Users/wangyahan/Statistical Learning for Data Science/Ch10Ex11.csv"
filename = "Ch10Ex11.csv"
gexpr = read.csv(filename, header=FALSE)
## Check size
dim(gexpr)
gexpr_t= t(gexpr)
gexpr_t=scale(gexpr_t)
#1(a)
#Compute the inter-observation correlations:
r_obs = cor(t(gexpr_t))
#we subtract each correlation from 1 to get the corresponding distance matrix
d_cor = 1 - r_obs
#d_cor is a matrix, not a dist object,To convert it to a object, we can use the as.dist function:
d_cor= as.dist(d_cor)
#use the hclust function to perform agglomerative hierarchical clustering，For illustration, we will apply the single-linkage method:
hc_c = hclust(d_cor,method="single")
#Passing this object to the plot function generates a dendrogram:
plot(hc_c,cex=0.75,main="",sub="",xlab="")
#1(b).1
#use the hclust function to perform agglomerative hierarchical clustering，For illustration, we will apply the complete-linkage method:
hc_c1 = hclust(d_cor,method="complete")
#Passing this object to the plot function generates a dendrogram:
plot(hc_c1,cex=0.5,main="",sub="",xlab="")
#1(b).2
#use the hclust function to perform agglomerative hierarchical clustering，For illustration, we will apply the average-linkage method:
hc_c2 = hclust(d_cor,method="average")
#Passing this object to the plot function generates a dendrogram:
plot(hc_c2,cex=0.5,main="",sub="",xlab="")
#1(c)
#Compute Euclidean distance matrix:
d_cor1=dist(gexpr_t)
#use the hclust function to perform agglomerative hierarchical clustering，For illustration, we will apply the single-linkage method:
hc_c3 = hclust(d_cor1,method="single")
#Passing this object to the plot function generates a dendrogram:
plot(hc_c3,cex=0.5,main="",sub="",xlab="")
#2(a)
#On the basis of this analysis,the genes separate the samples into the two groups
#Set the  maximum value of K
Kmax = 8
## Set up a vector to store the values of SS_W for each value of K:
SS_W = numeric(Kmax)
## Loop over values of K from 1 to Kmax, extracting the value of SS_W in each case:
for(K in 1:Kmax) {
km = kmeans(gexpr_t, K, iter.max = 50, nstart = 20)
SS_W[K] = km$tot.withinss
}
## Plot K against SS_W
plot(1:Kmax, SS_W, type="l", xlab="K", ylab="SS_W")
#clusters do not appear well separated
#2(b)
# we wish to perform a K-means clustering with K = 4. To do this we pass the data matrix and chosen value of K as the first two arguments to the kmeans function:
km = kmeans(gexpr_t, 4, iter.max=50, nstart=20)
## Perform the PCA:
pca_gexpr = prcomp(x=gexpr_t)
## Plot the first PC against the second PC using the cluster allocation to set
## different colours (col) and plotting characters (pch) for each cluster:
plot(pca_gexpr$x[,1], pca_gexpr$x[,2], xlab="First PC", ylab="Second PC",
col=km$cluster, pch=km$cluster)
## Add labels representing the patients types:
text(pca_gexpr$x[,1], pca_gexpr$x[,2], labels=rownames(gexpr_t), cex=0.5, pos=3,col="darkgrey")
# Load the data
data(BreastCancer)
head(BreastCancer)
dim(BreastCancer)
# Load mlbench package
library(mlbench)
library(nclSLR)
library(MASS)
# Load the data
data(BreastCancer)
head(BreastCancer)
dim(BreastCancer)
# Remove NA
BreastCancer=na.omit(BreastCancer)
dim(BreastCancer)
#convert the factors to quantitative variables
MyBreastCancer.x = apply(BreastCancer[,2:10],2,as.numeric)
MyBreastCancer.y = as.numeric(BreastCancer[,11])-1
MyBreastCancer = data.frame(MyBreastCancer.x, Class=MyBreastCancer.y)
head(MyBreastCancer)
#Set train and test set////////////////////////////////////////////
set.seed(498)
sub= sample(1:nrow(BreastCancer),round(nrow(BreastCancer)*7/10))
#7/10 data for training
data_train=MyBreastCancer[sub,]
MyBreastCancer_data_train=as.data.frame(data_train[,1:9])
y1_data_train=data_train[,10]
mode(y1_data_train)
#3/10 of the data for the test
data_test=MyBreastCancer[-sub,]
getwd()
setwd("/Users/wangyahan/Desktop/Data Management and Explor/DM")
source("~/Desktop/Data Management and Explor/DM/src/eda.R", echo=TRUE)
colnames(cyber.security.1_enrolments)
# Example preprocessing script.
gender <- cyber.security.1_enrolments %>%
select(learner_id, gender)
# Example preprocessing script.
gender <- cyber.security.1_enrolments %>%
select(gender)
source("~/Desktop/Data Management and Explor/DM/src/eda.R", echo=TRUE)
install.packages("tidyverse")
source("~/Desktop/Data Management and Explor/DM/src/eda.R", echo=TRUE)
source("~/Desktop/Data Management and Explor/DM/src/eda.R", echo=TRUE)
install.packages("plyr")
library('ProjectTemplate')
load.project()
# Example preprocessing script.
gender <- cyber.security.1_enrolments %>%
select(gender)
library(tidyverse)
